// +build !ignore_autogenerated

/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1alpha1

import (
	time "time"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Client) DeepCopyInto(out *Client) {
	*out = *in
	if in.BodyBufferSize != nil {
		in, out := &in.BodyBufferSize, &out.BodyBufferSize
		*out = new(string)
		**out = **in
	}
	if in.BodyTimeout != nil {
		in, out := &in.BodyTimeout, &out.BodyTimeout
		*out = new(int)
		**out = **in
	}
	if in.ForwardedForHeader != nil {
		in, out := &in.ForwardedForHeader, &out.ForwardedForHeader
		*out = new(string)
		**out = **in
	}
	if in.ComputeFullForwardedFor != nil {
		in, out := &in.ComputeFullForwardedFor, &out.ComputeFullForwardedFor
		*out = new(bool)
		**out = **in
	}
	if in.HeaderBufferSize != nil {
		in, out := &in.HeaderBufferSize, &out.HeaderBufferSize
		*out = new(string)
		**out = **in
	}
	if in.HeaderTimeout != nil {
		in, out := &in.HeaderTimeout, &out.HeaderTimeout
		*out = new(int)
		**out = **in
	}
	if in.LargeClientHeaderBuffers != nil {
		in, out := &in.LargeClientHeaderBuffers, &out.LargeClientHeaderBuffers
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Client.
func (in *Client) DeepCopy() *Client {
	if in == nil {
		return nil
	}
	out := new(Client)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Configuration) DeepCopyInto(out *Configuration) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	out.Status = in.Status
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Configuration.
func (in *Configuration) DeepCopy() *Configuration {
	if in == nil {
		return nil
	}
	out := new(Configuration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Configuration) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigurationList) DeepCopyInto(out *ConfigurationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Configuration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigurationList.
func (in *ConfigurationList) DeepCopy() *ConfigurationList {
	if in == nil {
		return nil
	}
	out := new(ConfigurationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigurationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigurationSpec) DeepCopyInto(out *ConfigurationSpec) {
	*out = *in
	if in.Global != nil {
		in, out := &in.Global, &out.Global
		*out = new(Global)
		(*in).DeepCopyInto(*out)
	}
	if in.Client != nil {
		in, out := &in.Client, &out.Client
		*out = new(Client)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTP2 != nil {
		in, out := &in.HTTP2, &out.HTTP2
		*out = new(HTTP2)
		(*in).DeepCopyInto(*out)
	}
	if in.Log != nil {
		in, out := &in.Log, &out.Log
		*out = new(Log)
		(*in).DeepCopyInto(*out)
	}
	if in.Metrics != nil {
		in, out := &in.Metrics, &out.Metrics
		*out = new(Metrics)
		(*in).DeepCopyInto(*out)
	}
	if in.Opentracing != nil {
		in, out := &in.Opentracing, &out.Opentracing
		*out = new(Opentracing)
		(*in).DeepCopyInto(*out)
	}
	if in.Snippets != nil {
		in, out := &in.Snippets, &out.Snippets
		*out = new(Snippets)
		(*in).DeepCopyInto(*out)
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(SSL)
		(*in).DeepCopyInto(*out)
	}
	if in.Upstream != nil {
		in, out := &in.Upstream, &out.Upstream
		*out = new(Upstream)
		(*in).DeepCopyInto(*out)
	}
	if in.WAF != nil {
		in, out := &in.WAF, &out.WAF
		*out = new(WAF)
		(*in).DeepCopyInto(*out)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigurationSpec.
func (in *ConfigurationSpec) DeepCopy() *ConfigurationSpec {
	if in == nil {
		return nil
	}
	out := new(ConfigurationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigurationStatus) DeepCopyInto(out *ConfigurationStatus) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigurationStatus.
func (in *ConfigurationStatus) DeepCopy() *ConfigurationStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigurationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Global) DeepCopyInto(out *Global) {
	*out = *in
	if in.CustomHTTPErrors != nil {
		in, out := &in.CustomHTTPErrors, &out.CustomHTTPErrors
		*out = make([]*int, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(int)
				**out = **in
			}
		}
	}
	if in.EnableBrotli != nil {
		in, out := &in.EnableBrotli, &out.EnableBrotli
		*out = new(bool)
		**out = **in
	}
	if in.BrotliLevel != nil {
		in, out := &in.BrotliLevel, &out.BrotliLevel
		*out = new(int)
		**out = **in
	}
	if in.BrotliTypes != nil {
		in, out := &in.BrotliTypes, &out.BrotliTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnableGeoIP != nil {
		in, out := &in.EnableGeoIP, &out.EnableGeoIP
		*out = new(bool)
		**out = **in
	}
	if in.EnableGzip != nil {
		in, out := &in.EnableGzip, &out.EnableGzip
		*out = new(bool)
		**out = **in
	}
	if in.GzipLevel != nil {
		in, out := &in.GzipLevel, &out.GzipLevel
		*out = new(int)
		**out = **in
	}
	if in.GzipTypes != nil {
		in, out := &in.GzipTypes, &out.GzipTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnableInfluxDB != nil {
		in, out := &in.EnableInfluxDB, &out.EnableInfluxDB
		*out = new(bool)
		**out = **in
	}
	if in.EnableMultiAccept != nil {
		in, out := &in.EnableMultiAccept, &out.EnableMultiAccept
		*out = new(bool)
		**out = **in
	}
	if in.EnableProxyProtocol != nil {
		in, out := &in.EnableProxyProtocol, &out.EnableProxyProtocol
		*out = new(bool)
		**out = **in
	}
	if in.EnableRequestID != nil {
		in, out := &in.EnableRequestID, &out.EnableRequestID
		*out = new(bool)
		**out = **in
	}
	if in.EnableReusePort != nil {
		in, out := &in.EnableReusePort, &out.EnableReusePort
		*out = new(bool)
		**out = **in
	}
	if in.EnableUnderscoresInHeaders != nil {
		in, out := &in.EnableUnderscoresInHeaders, &out.EnableUnderscoresInHeaders
		*out = new(bool)
		**out = **in
	}
	if in.IgnoreInvalidHeaders != nil {
		in, out := &in.IgnoreInvalidHeaders, &out.IgnoreInvalidHeaders
		*out = new(bool)
		**out = **in
	}
	if in.KeepAlive != nil {
		in, out := &in.KeepAlive, &out.KeepAlive
		*out = new(int)
		**out = **in
	}
	if in.KeepAliveRequests != nil {
		in, out := &in.KeepAliveRequests, &out.KeepAliveRequests
		*out = new(int)
		**out = **in
	}
	if in.LimitConnZoneVariable != nil {
		in, out := &in.LimitConnZoneVariable, &out.LimitConnZoneVariable
		*out = new(string)
		**out = **in
	}
	if in.LimitRequestStatusCode != nil {
		in, out := &in.LimitRequestStatusCode, &out.LimitRequestStatusCode
		*out = new(int)
		**out = **in
	}
	if in.LoadBalanceAlgorithm != nil {
		in, out := &in.LoadBalanceAlgorithm, &out.LoadBalanceAlgorithm
		*out = new(LoadBalanceAlgorithm)
		**out = **in
	}
	if in.MapHashBucketSize != nil {
		in, out := &in.MapHashBucketSize, &out.MapHashBucketSize
		*out = new(int)
		**out = **in
	}
	if in.MaxWorkerConnections != nil {
		in, out := &in.MaxWorkerConnections, &out.MaxWorkerConnections
		*out = new(int)
		**out = **in
	}
	if in.HTTPRedirectCode != nil {
		in, out := &in.HTTPRedirectCode, &out.HTTPRedirectCode
		*out = new(int)
		**out = **in
	}
	if in.NoAuthLocations != nil {
		in, out := &in.NoAuthLocations, &out.NoAuthLocations
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PortInRedirects != nil {
		in, out := &in.PortInRedirects, &out.PortInRedirects
		*out = new(bool)
		**out = **in
	}
	if in.ProxyProtocolHeaderTimeout != nil {
		in, out := &in.ProxyProtocolHeaderTimeout, &out.ProxyProtocolHeaderTimeout
		*out = new(time.Duration)
		**out = **in
	}
	if in.ProxyRealIPCIDR != nil {
		in, out := &in.ProxyRealIPCIDR, &out.ProxyRealIPCIDR
		*out = make([]*IPAddr, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = (*in).DeepCopy()
			}
		}
	}
	if in.Resolver != nil {
		in, out := &in.Resolver, &out.Resolver
		*out = make([]*IPAddr, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = (*in).DeepCopy()
			}
		}
	}
	if in.RetryNonIdempotent != nil {
		in, out := &in.RetryNonIdempotent, &out.RetryNonIdempotent
		*out = new(bool)
		**out = **in
	}
	if in.ServerNameHashBucketSize != nil {
		in, out := &in.ServerNameHashBucketSize, &out.ServerNameHashBucketSize
		*out = new(int)
		**out = **in
	}
	if in.ServerNameHashMaxSize != nil {
		in, out := &in.ServerNameHashMaxSize, &out.ServerNameHashMaxSize
		*out = new(int)
		**out = **in
	}
	if in.ShowServerTokens != nil {
		in, out := &in.ShowServerTokens, &out.ShowServerTokens
		*out = new(bool)
		**out = **in
	}
	if in.StatusIPV4Whitelist != nil {
		in, out := &in.StatusIPV4Whitelist, &out.StatusIPV4Whitelist
		*out = make([]*IPAddr, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = (*in).DeepCopy()
			}
		}
	}
	if in.StatusIPV6Whitelist != nil {
		in, out := &in.StatusIPV6Whitelist, &out.StatusIPV6Whitelist
		*out = make([]*IPAddr, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = (*in).DeepCopy()
			}
		}
	}
	if in.WorkerCPUAffinity != nil {
		in, out := &in.WorkerCPUAffinity, &out.WorkerCPUAffinity
		*out = new(string)
		**out = **in
	}
	if in.WorkerProcesses != nil {
		in, out := &in.WorkerProcesses, &out.WorkerProcesses
		*out = new(int)
		**out = **in
	}
	if in.WorkerShutdownTimeout != nil {
		in, out := &in.WorkerShutdownTimeout, &out.WorkerShutdownTimeout
		*out = new(int)
		**out = **in
	}
	if in.VariablesHashBucketSize != nil {
		in, out := &in.VariablesHashBucketSize, &out.VariablesHashBucketSize
		*out = new(int)
		**out = **in
	}
	if in.VariablesHashMaxSize != nil {
		in, out := &in.VariablesHashMaxSize, &out.VariablesHashMaxSize
		*out = new(int)
		**out = **in
	}
	if in.WhitelistSourceRange != nil {
		in, out := &in.WhitelistSourceRange, &out.WhitelistSourceRange
		*out = make([]*IPAddr, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = (*in).DeepCopy()
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Global.
func (in *Global) DeepCopy() *Global {
	if in == nil {
		return nil
	}
	out := new(Global)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HSTS) DeepCopyInto(out *HSTS) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.IncludeSubdomains != nil {
		in, out := &in.IncludeSubdomains, &out.IncludeSubdomains
		*out = new(bool)
		**out = **in
	}
	if in.MaxAge != nil {
		in, out := &in.MaxAge, &out.MaxAge
		*out = new(int64)
		**out = **in
	}
	if in.Preload != nil {
		in, out := &in.Preload, &out.Preload
		*out = new(bool)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HSTS.
func (in *HSTS) DeepCopy() *HSTS {
	if in == nil {
		return nil
	}
	out := new(HSTS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HTTP2) DeepCopyInto(out *HTTP2) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxFieldSize != nil {
		in, out := &in.MaxFieldSize, &out.MaxFieldSize
		*out = new(string)
		**out = **in
	}
	if in.MaxHeaderSize != nil {
		in, out := &in.MaxHeaderSize, &out.MaxHeaderSize
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HTTP2.
func (in *HTTP2) DeepCopy() *HTTP2 {
	if in == nil {
		return nil
	}
	out := new(HTTP2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JaegerConfiguration) DeepCopyInto(out *JaegerConfiguration) {
	*out = *in
	if in.CollectorHost != nil {
		in, out := &in.CollectorHost, &out.CollectorHost
		*out = new(string)
		**out = **in
	}
	if in.CollectorPort != nil {
		in, out := &in.CollectorPort, &out.CollectorPort
		*out = new(int)
		**out = **in
	}
	if in.ServiceName != nil {
		in, out := &in.ServiceName, &out.ServiceName
		*out = new(string)
		**out = **in
	}
	if in.SamplerType != nil {
		in, out := &in.SamplerType, &out.SamplerType
		*out = new(JaegerSamplerType)
		**out = **in
	}
	if in.SamplerParam != nil {
		in, out := &in.SamplerParam, &out.SamplerParam
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JaegerConfiguration.
func (in *JaegerConfiguration) DeepCopy() *JaegerConfiguration {
	if in == nil {
		return nil
	}
	out := new(JaegerConfiguration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Log) DeepCopyInto(out *Log) {
	*out = *in
	if in.EnableAccessLog != nil {
		in, out := &in.EnableAccessLog, &out.EnableAccessLog
		*out = new(bool)
		**out = **in
	}
	if in.ErrorLogLevel != nil {
		in, out := &in.ErrorLogLevel, &out.ErrorLogLevel
		*out = new(string)
		**out = **in
	}
	if in.FormatEscapeJSON != nil {
		in, out := &in.FormatEscapeJSON, &out.FormatEscapeJSON
		*out = new(bool)
		**out = **in
	}
	if in.FormatUpstream != nil {
		in, out := &in.FormatUpstream, &out.FormatUpstream
		*out = new(string)
		**out = **in
	}
	if in.SkipAccessLogURLs != nil {
		in, out := &in.SkipAccessLogURLs, &out.SkipAccessLogURLs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.File != nil {
		in, out := &in.File, &out.File
		*out = new(LogFileConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.Syslog != nil {
		in, out := &in.Syslog, &out.Syslog
		*out = new(SyslogConfiguration)
		(*in).DeepCopyInto(*out)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Log.
func (in *Log) DeepCopy() *Log {
	if in == nil {
		return nil
	}
	out := new(Log)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogFileConfiguration) DeepCopyInto(out *LogFileConfiguration) {
	*out = *in
	if in.AccessLogPath != nil {
		in, out := &in.AccessLogPath, &out.AccessLogPath
		*out = new(string)
		**out = **in
	}
	if in.ErrorLogPath != nil {
		in, out := &in.ErrorLogPath, &out.ErrorLogPath
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogFileConfiguration.
func (in *LogFileConfiguration) DeepCopy() *LogFileConfiguration {
	if in == nil {
		return nil
	}
	out := new(LogFileConfiguration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Metrics) DeepCopyInto(out *Metrics) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Metrics.
func (in *Metrics) DeepCopy() *Metrics {
	if in == nil {
		return nil
	}
	out := new(Metrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Opentracing) DeepCopyInto(out *Opentracing) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Jaeger != nil {
		in, out := &in.Jaeger, &out.Jaeger
		*out = new(JaegerConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.Zipkin != nil {
		in, out := &in.Zipkin, &out.Zipkin
		*out = new(ZipkinConfiguration)
		(*in).DeepCopyInto(*out)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Opentracing.
func (in *Opentracing) DeepCopy() *Opentracing {
	if in == nil {
		return nil
	}
	out := new(Opentracing)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SSL) DeepCopyInto(out *SSL) {
	*out = *in
	if in.HSTS != nil {
		in, out := &in.HSTS, &out.HSTS
		*out = new(HSTS)
		(*in).DeepCopyInto(*out)
	}
	if in.SSLRedirect != nil {
		in, out := &in.SSLRedirect, &out.SSLRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ForceSSLRedirect != nil {
		in, out := &in.ForceSSLRedirect, &out.ForceSSLRedirect
		*out = new(bool)
		**out = **in
	}
	if in.NoTLSRedirectLocations != nil {
		in, out := &in.NoTLSRedirectLocations, &out.NoTLSRedirectLocations
		*out = new(string)
		**out = **in
	}
	if in.Ciphers != nil {
		in, out := &in.Ciphers, &out.Ciphers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ECDHCurve != nil {
		in, out := &in.ECDHCurve, &out.ECDHCurve
		*out = new(string)
		**out = **in
	}
	if in.DHParam != nil {
		in, out := &in.DHParam, &out.DHParam
		*out = new(string)
		**out = **in
	}
	if in.Protocols != nil {
		in, out := &in.Protocols, &out.Protocols
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SessionCache != nil {
		in, out := &in.SessionCache, &out.SessionCache
		*out = new(bool)
		**out = **in
	}
	if in.SessionCacheSize != nil {
		in, out := &in.SessionCacheSize, &out.SessionCacheSize
		*out = new(string)
		**out = **in
	}
	if in.SessionTickets != nil {
		in, out := &in.SessionTickets, &out.SessionTickets
		*out = new(bool)
		**out = **in
	}
	if in.SessionTicketKey != nil {
		in, out := &in.SessionTicketKey, &out.SessionTicketKey
		*out = new(string)
		**out = **in
	}
	if in.SessionTimeout != nil {
		in, out := &in.SessionTimeout, &out.SessionTimeout
		*out = new(string)
		**out = **in
	}
	if in.BufferSize != nil {
		in, out := &in.BufferSize, &out.BufferSize
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SSL.
func (in *SSL) DeepCopy() *SSL {
	if in == nil {
		return nil
	}
	out := new(SSL)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Snippets) DeepCopyInto(out *Snippets) {
	*out = *in
	if in.Main != nil {
		in, out := &in.Main, &out.Main
		*out = make([]*Snippet, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(Snippet)
				if **in != nil {
					in, out := *in, *out
					*out = new(string)
					**out = **in
				}
			}
		}
	}
	if in.HTTP != nil {
		in, out := &in.HTTP, &out.HTTP
		*out = make([]*Snippet, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(Snippet)
				if **in != nil {
					in, out := *in, *out
					*out = new(string)
					**out = **in
				}
			}
		}
	}
	if in.Server != nil {
		in, out := &in.Server, &out.Server
		*out = make([]*Snippet, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(Snippet)
				if **in != nil {
					in, out := *in, *out
					*out = new(string)
					**out = **in
				}
			}
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = make([]*Snippet, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(Snippet)
				if **in != nil {
					in, out := *in, *out
					*out = new(string)
					**out = **in
				}
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Snippets.
func (in *Snippets) DeepCopy() *Snippets {
	if in == nil {
		return nil
	}
	out := new(Snippets)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SyslogConfiguration) DeepCopyInto(out *SyslogConfiguration) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SyslogConfiguration.
func (in *SyslogConfiguration) DeepCopy() *SyslogConfiguration {
	if in == nil {
		return nil
	}
	out := new(SyslogConfiguration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Upstream) DeepCopyInto(out *Upstream) {
	*out = *in
	if in.AddOriginalURIHeader != nil {
		in, out := &in.AddOriginalURIHeader, &out.AddOriginalURIHeader
		*out = new(bool)
		**out = **in
	}
	if in.SetHeaders != nil {
		in, out := &in.SetHeaders, &out.SetHeaders
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.HideHeaders != nil {
		in, out := &in.HideHeaders, &out.HideHeaders
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnableServerHeaderFromBackend != nil {
		in, out := &in.EnableServerHeaderFromBackend, &out.EnableServerHeaderFromBackend
		*out = new(bool)
		**out = **in
	}
	if in.BodySize != nil {
		in, out := &in.BodySize, &out.BodySize
		*out = new(string)
		**out = **in
	}
	if in.Buffering != nil {
		in, out := &in.Buffering, &out.Buffering
		*out = new(bool)
		**out = **in
	}
	if in.BufferSize != nil {
		in, out := &in.BufferSize, &out.BufferSize
		*out = new(string)
		**out = **in
	}
	if in.CookieDomain != nil {
		in, out := &in.CookieDomain, &out.CookieDomain
		*out = new(string)
		**out = **in
	}
	if in.CookiePath != nil {
		in, out := &in.CookiePath, &out.CookiePath
		*out = new(string)
		**out = **in
	}
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(int)
		**out = **in
	}
	if in.FailTimeout != nil {
		in, out := &in.FailTimeout, &out.FailTimeout
		*out = new(int)
		**out = **in
	}
	if in.HashBy != nil {
		in, out := &in.HashBy, &out.HashBy
		*out = new(string)
		**out = **in
	}
	if in.HeadersHashBucketSize != nil {
		in, out := &in.HeadersHashBucketSize, &out.HeadersHashBucketSize
		*out = new(int)
		**out = **in
	}
	if in.HeadersHashMaxSize != nil {
		in, out := &in.HeadersHashMaxSize, &out.HeadersHashMaxSize
		*out = new(int)
		**out = **in
	}
	if in.KeepaliveConnections != nil {
		in, out := &in.KeepaliveConnections, &out.KeepaliveConnections
		*out = new(int)
		**out = **in
	}
	if in.MaxFails != nil {
		in, out := &in.MaxFails, &out.MaxFails
		*out = new(int)
		**out = **in
	}
	if in.NextUpstream != nil {
		in, out := &in.NextUpstream, &out.NextUpstream
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.NextUpstreamTries != nil {
		in, out := &in.NextUpstreamTries, &out.NextUpstreamTries
		*out = new(int)
		**out = **in
	}
	if in.ReadTimeout != nil {
		in, out := &in.ReadTimeout, &out.ReadTimeout
		*out = new(int)
		**out = **in
	}
	if in.RedirectFrom != nil {
		in, out := &in.RedirectFrom, &out.RedirectFrom
		*out = new(bool)
		**out = **in
	}
	if in.RedirectTo != nil {
		in, out := &in.RedirectTo, &out.RedirectTo
		*out = new(bool)
		**out = **in
	}
	if in.RequestBuffering != nil {
		in, out := &in.RequestBuffering, &out.RequestBuffering
		*out = new(bool)
		**out = **in
	}
	if in.SendTimeout != nil {
		in, out := &in.SendTimeout, &out.SendTimeout
		*out = new(int)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Upstream.
func (in *Upstream) DeepCopy() *Upstream {
	if in == nil {
		return nil
	}
	out := new(Upstream)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WAF) DeepCopyInto(out *WAF) {
	*out = *in
	if in.EnableModsecurity != nil {
		in, out := &in.EnableModsecurity, &out.EnableModsecurity
		*out = new(bool)
		**out = **in
	}
	if in.EnableOWASPCoreRules != nil {
		in, out := &in.EnableOWASPCoreRules, &out.EnableOWASPCoreRules
		*out = new(bool)
		**out = **in
	}
	if in.CustomRules != nil {
		in, out := &in.CustomRules, &out.CustomRules
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnableLuaRestyWAF != nil {
		in, out := &in.EnableLuaRestyWAF, &out.EnableLuaRestyWAF
		*out = new(bool)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WAF.
func (in *WAF) DeepCopy() *WAF {
	if in == nil {
		return nil
	}
	out := new(WAF)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZipkinConfiguration) DeepCopyInto(out *ZipkinConfiguration) {
	*out = *in
	if in.CollectorHost != nil {
		in, out := &in.CollectorHost, &out.CollectorHost
		*out = new(string)
		**out = **in
	}
	if in.CollectorPort != nil {
		in, out := &in.CollectorPort, &out.CollectorPort
		*out = new(int)
		**out = **in
	}
	if in.ServiceName != nil {
		in, out := &in.ServiceName, &out.ServiceName
		*out = new(string)
		**out = **in
	}
	if in.SampleRate != nil {
		in, out := &in.SampleRate, &out.SampleRate
		*out = new(float32)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZipkinConfiguration.
func (in *ZipkinConfiguration) DeepCopy() *ZipkinConfiguration {
	if in == nil {
		return nil
	}
	out := new(ZipkinConfiguration)
	in.DeepCopyInto(out)
	return out
}
