// Code generated by protoc-gen-go. DO NOT EDIT.
// source: notification.proto

package notification

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Client struct {
	PodName              string   `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodUuid              string   `protobuf:"bytes,2,opt,name=pod_uuid,json=podUuid,proto3" json:"pod_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Client) Reset()         { *m = Client{} }
func (m *Client) String() string { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()    {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{0}
}

func (m *Client) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Client.Unmarshal(m, b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Client.Marshal(b, m, deterministic)
}
func (m *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(m, src)
}
func (m *Client) XXX_Size() int {
	return xxx_messageInfo_Client.Size(m)
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *Client) GetPodUuid() string {
	if m != nil {
		return m.PodUuid
	}
	return ""
}

type Update struct {
	Latest               *timestamp.Timestamp `protobuf:"bytes,1,opt,name=latest,proto3" json:"latest,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{1}
}

func (m *Update) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update.Unmarshal(m, b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update.Marshal(b, m, deterministic)
}
func (m *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(m, src)
}
func (m *Update) XXX_Size() int {
	return xxx_messageInfo_Update.Size(m)
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

func (m *Update) GetLatest() *timestamp.Timestamp {
	if m != nil {
		return m.Latest
	}
	return nil
}

func init() {
	proto.RegisterType((*Client)(nil), "notification.Client")
	proto.RegisterType((*Update)(nil), "notification.Update")
}

func init() { proto.RegisterFile("notification.proto", fileDescriptor_736a457d4a5efa07) }

var fileDescriptor_736a457d4a5efa07 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x65, 0x06, 0x43, 0x0d, 0x93, 0xc5, 0x50, 0xb2, 0x80, 0x3a, 0x75, 0x72, 0x51, 0x18,
	0x41, 0x2c, 0x8c, 0x48, 0x0c, 0x81, 0xcc, 0xc8, 0x8e, 0x2f, 0xd1, 0x49, 0xb1, 0xcf, 0x4a, 0xce,
	0xff, 0x1f, 0x29, 0x26, 0x88, 0x74, 0x7d, 0xdf, 0x3b, 0x7d, 0xef, 0x94, 0x8e, 0xc4, 0xd8, 0x63,
	0x67, 0x19, 0x29, 0x9a, 0x34, 0x11, 0x93, 0xbe, 0xf9, 0x9f, 0x55, 0xf7, 0x03, 0xd1, 0x30, 0xc2,
	0x69, 0x61, 0x2e, 0xf7, 0x27, 0xc6, 0x00, 0x33, 0xdb, 0x90, 0x4a, 0xfd, 0xf0, 0xaa, 0xe4, 0xdb,
	0x88, 0x10, 0x59, 0xdf, 0xa9, 0xab, 0x44, 0xfe, 0x3b, 0xda, 0x00, 0x7b, 0xf1, 0x20, 0x8e, 0xbb,
	0xe6, 0x32, 0x91, 0xff, 0xb0, 0x01, 0x56, 0x94, 0x33, 0xfa, 0xfd, 0xc5, 0x1f, 0x6a, 0x33, 0xfa,
	0xc3, 0x8b, 0x92, 0x6d, 0xf2, 0x96, 0x41, 0xd7, 0x4a, 0x8e, 0x96, 0x61, 0xe6, 0xe5, 0xfa, 0xba,
	0xae, 0x4c, 0x71, 0x9b, 0xd5, 0x6d, 0xbe, 0x56, 0x77, 0xf3, 0xdb, 0xac, 0xdf, 0xd5, 0x66, 0xae,
	0x7e, 0x56, 0xbb, 0xcf, 0xec, 0xe6, 0x6e, 0x42, 0x07, 0xfa, 0xd6, 0x6c, 0xde, 0x2b, 0x33, 0xab,
	0xb3, 0xb4, 0xc8, 0x8f, 0xe2, 0x51, 0x38, 0xb9, 0x88, 0x9e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x9b, 0x59, 0x8a, 0xeb, 0x16, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotificationClient is the client API for Notification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Notification_SubscribeClient, error)
}

type notificationClient struct {
	cc *grpc.ClientConn
}

func NewNotificationClient(cc *grpc.ClientConn) NotificationClient {
	return &notificationClient{cc}
}

func (c *notificationClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Notification_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Notification_serviceDesc.Streams[0], "/notification.notification/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationSubscribeClient{stream}
	return x, nil
}

type Notification_SubscribeClient interface {
	Send(*Client) error
	Recv() (*Update, error)
	grpc.ClientStream
}

type notificationSubscribeClient struct {
	grpc.ClientStream
}

func (x *notificationSubscribeClient) Send(m *Client) error {
	return x.ClientStream.SendMsg(m)
}

func (x *notificationSubscribeClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotificationServer is the server API for Notification service.
type NotificationServer interface {
	Subscribe(Notification_SubscribeServer) error
}

func RegisterNotificationServer(s *grpc.Server, srv NotificationServer) {
	s.RegisterService(&_Notification_serviceDesc, srv)
}

func _Notification_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotificationServer).Subscribe(&notificationSubscribeServer{stream})
}

type Notification_SubscribeServer interface {
	Send(*Update) error
	Recv() (*Client, error)
	grpc.ServerStream
}

type notificationSubscribeServer struct {
	grpc.ServerStream
}

func (x *notificationSubscribeServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

func (x *notificationSubscribeServer) Recv() (*Client, error) {
	m := new(Client)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Notification_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notification.notification",
	HandlerType: (*NotificationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Notification_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "notification.proto",
}
